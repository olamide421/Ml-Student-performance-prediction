# -*- coding: utf-8 -*-
"""Student performance prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qHxp0Q-0u7oN9UYykIh04DcuX7489kc3
"""

!pip

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import scipy.stats as stats

from google.colab import files
uploaded = files.upload()

import pandas as pd

df = pd.read_csv("Student_Performance.csv")  # Replace with your file name
df.head()

df.isnull().sum()

df. head()

df.shape



df.describe()

print(f"Number of duplicates : {df.duplicated().sum()}")

df=df.drop_duplicates()
print(f"Number of duplicates after dropping: {df.duplicated().sum()}")

from sklearn.preprocessing import LabelEncoder, StandardScaler

df.head()

le = LabelEncoder()
df['Extracurricular Activities'] = le.fit_transform(df['Extracurricular Activities'])

correlation_matrix = df.corr(numeric_only=True)
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation matrix for Numerical Features")
plt.show()



df = df.drop(columns=['Extracurricular Activities','Sleep Hours','Sample Question Papers Practiced'], axis=1)

df.head()

df.head()

df.head()

y = df['Performance Index']
X = df.drop('Performance Index', axis=1)

scalar = StandardScaler()
X_scaled = pd.DataFrame(scalar.fit_transform(X), columns=X.columns)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.1, random_state=42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

feature = 'Previous Scores'
X_single_train = X_train[[feature]]
X_single_test = X_test[[feature]]


lr_single = LinearRegression()
lr_single.fit(X_single_train, y_train)

y_pred_single = lr_single.predict(X_single_test)

import matplotlib.pyplot as plt

plt.scatter(X_single_test, y_test, color='blue', label='Actual')
plt.plot(X_single_test, y_pred_single, color='red', label='Predicted')
plt.xlabel("Previous Score")
plt.ylabel("Performance index")
plt.title("Single Linear Regression")
plt.legend()
plt.grid(True)
plt.show()

mse_single = mean_squared_error(y_test, y_pred_single)
r2_single = r2_score(y_test, y_pred_single)

print(f"MSE: {mse_single:.2f}")
print(f"R² score: {r2_single:.2f}")

lr_multi = LinearRegression()
lr_multi.fit(X_train, y_train)


y_pred_multi = lr_multi.predict(X_test)

plt.scatter(y_test, y_pred_multi, color='green', label='Actual', alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Prediction')
plt.xlabel("Actual Performance Index")
plt.ylabel("Predicted Performance Index")
plt.title("Multiple Linear Regression")
#plt.legend()
plt.grid(True)
plt.show()

mse_multi = mean_squared_error(y_test, y_pred_multi)
r2_multi = r2_score(y_test, y_pred_multi)

print(f"Multi-feature MSE: {mse_multi:.2f}")
print(f"Multi-feature R²: {r2_multi:.2f}")

features = X_train.columns

coeffiients = pd.DataFrame({
    'Feature': features,
   'Coefficient': lr_multi.coef_
}).sort_values(by='Coefficient', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Coefficient', y='Feature', data=coeffiients, palette='viridis')
plt.title('Feature Importance in Multiple Linear Regression')
plt.xlabel('Coefficient Value')
plt.ylabel('Feature')
plt.grid(True)
plt.tight_layout()
plt.show()

